---
# Extract service files and restore Docker volumes
# Requires: final_backup_file variable

- name: Remove existing service directory (handle Docker-created files)
  shell: |
    set -e
    if [ -d "{{ service_dir }}" ]; then
      echo "Removing existing service directory..."
      # Use sudo to handle files created by Docker with root ownership
      sudo rm -rf "{{ service_dir }}"
      echo "Service directory removed"
    else
      echo "Service directory doesn't exist, skipping removal"
    fi
  args:
    executable: /bin/bash
  failed_when: false

- name: Create service directory
  file:
    path: "{{ service_dir }}"
    state: directory
    owner: karsten
    group: karsten
    mode: '0755'

- name: Create temporary directory for extraction
  tempfile:
    state: directory
    suffix: _{{ service_name }}_restore
  register: temp_restore_dir

- name: Extract backup archive
  unarchive:
    src: "{{ final_backup_file }}"
    dest: "{{ temp_restore_dir.path }}"
    remote_src: yes
    owner: karsten
    group: karsten
    extra_opts:
      - --overwrite
      - --no-same-owner
      - --no-same-permissions

- name: Check for Docker volume backups
  find:
    paths: "{{ temp_restore_dir.path }}"
    patterns: "*.tar.gz"
    file_type: file
  register: volume_backups_found

- name: Create Docker volumes for restore
  community.docker.docker_volume:
    name: "{{ item.path | basename | regex_replace('\\.tar\\.gz$', '') }}"
    state: present
  loop: "{{ volume_backups_found.files }}"
  when: volume_backups_found.files | length > 0

- name: Restore Docker volumes using Ansible Docker module
  community.docker.docker_container:
    name: "restore_{{ service_name }}_{{ item.path | basename | regex_replace('\\.tar\\.gz$', '') }}"
    image: alpine:latest
    state: started
    detach: false
    cleanup: true
    auto_remove: true
    volumes:
      - "{{ item.path | basename | regex_replace('\\.tar\\.gz$', '') }}:/volume"
      - "{{ temp_restore_dir.path }}:/backup:ro"
    command: sh -c "cd /volume && tar xzf /backup/{{ item.path | basename }}"
  loop: "{{ volume_backups_found.files }}"
  when: volume_backups_found.files | length > 0
  register: volume_restore_results

- name: Remove volume files from temp directory
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ volume_backups_found.files }}"
  when: volume_backups_found.files | length > 0

- name: Move service files to final location
  shell: |
    set -e
    echo "Restoring service files..."
    
    if [ ! -d "{{ temp_restore_dir.path }}/{{ service_name }}" ]; then
      echo "Error: Service directory not found in backup"
      exit 1
    fi
    
    # Copy all files (including hidden files)
    cp -r "{{ temp_restore_dir.path }}/{{ service_name }}"/* "{{ service_dir }}/" 2>/dev/null || true
    cp -r "{{ temp_restore_dir.path }}/{{ service_name }}"/.[!.]* "{{ service_dir }}/" 2>/dev/null || true
    
    # Set ownership and permissions recursively
    sudo chown -R karsten:karsten "{{ service_dir }}"
    sudo chmod -R u+rwX,g+rX,o+rX "{{ service_dir }}"
    
    echo "Service files restored with proper ownership"
  args:
    executable: /bin/bash

- name: Verify docker-compose file exists
  stat:
    path: "{{ compose_file }}"
  register: restored_compose
  failed_when: not restored_compose.stat.exists

- name: Start restored containers
  block:
    - name: Start containers using Docker Compose V2 module
      community.docker.docker_compose_v2:
        project_src: "{{ service_dir }}"
        state: present
      register: container_start_result
  rescue:
    - name: Start containers using shell command (fallback)
      shell: |
        if command -v docker >/dev/null 2>&1; then
          if docker compose version >/dev/null 2>&1; then
            echo "Using docker compose (V2)"
            docker compose up -d
          elif docker-compose --version >/dev/null 2>&1; then
            echo "Using docker-compose (V1)"
            docker-compose up -d
          else
            echo "No Docker Compose found"
            exit 1
          fi
        else
          echo "Docker not found"
          exit 1
        fi
      args:
        chdir: "{{ service_dir }}"
      register: container_start_result
      failed_when: container_start_result.rc != 0

- name: Wait for containers to be healthy
  pause:
    seconds: 10

- name: Verify containers are running
  block:
    - name: Check container status using Docker Compose V2 module
      community.docker.docker_compose_v2:
        project_src: "{{ service_dir }}"
        state: present
      register: container_status
  rescue:
    - name: Check container status using shell command (fallback)
      shell: |
        if command -v docker >/dev/null 2>&1; then
          if docker compose version >/dev/null 2>&1; then
            echo "Checking status with docker compose (V2)"
            docker compose ps
          elif docker-compose --version >/dev/null 2>&1; then
            echo "Checking status with docker-compose (V1)"
            docker-compose ps
          else
            echo "No Docker Compose found"
            exit 1
          fi
        else
          echo "Docker not found"
          exit 1
        fi
      args:
        chdir: "{{ service_dir }}"
      register: container_status
      failed_when: false

- name: Clean up temporary directory
  file:
    path: "{{ temp_restore_dir.path }}"
    state: absent
