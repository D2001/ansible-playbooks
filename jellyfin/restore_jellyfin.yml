---
- name: Restore Docker service from latest available backup (local, NAS, or OneDrive)
  hosts: localhost
  become: yes

  vars_prompt:
    - name: confirm_restore
      prompt: |
        WARNING: This will DELETE your existing ~/jellyfin directory and replace it with the latest backup.
        Type YES to proceed:
      private: no

  pre_tasks:
    - name: Abort if not confirmed
      fail:
        msg: "Restore cancelled."
      when: confirm_restore != "YES"

  vars:
    service_name: jellyfin   # Override with -e "service_name=paperless"
    service_dir: "/home/karsten/{{ service_name }}"
    backup_dir: "/home/karsten/backups/{{ service_name }}_backups"
    nas_backup_dir: "/mnt/{{ service_name }}/backup"
    rclone_remote: "onedrive:{{ service_name }}_backups"
    backup_pattern: "{{ service_name }}_backup_*.tar.gz"
    compose_file: "{{ service_dir }}/docker-compose.yml"

  tasks:
    - name: Ensure backup directory exists
      file:
        path: "{{ backup_dir }}"
        state: directory
        owner: karsten
        group: karsten
        mode: '0755'

    - name: Check if service directory exists
      stat:
        path: "{{ compose_file }}"
      register: service_compose

    - name: Stop {{ service_name }} containers
      become_user: karsten
      shell: docker-compose down
      args:
        chdir: "{{ service_dir }}"
      when: service_compose.stat.exists

    # --- Find latest local backup ---
    - name: Find latest local backup
      become_user: karsten
      shell: |
        ls -1t {{ backup_dir }}/{{ backup_pattern }} 2>/dev/null | head -n 1
      register: local_backup
      changed_when: false

    # --- Find latest NAS backup ---
    - name: Find latest NAS backup
      become_user: karsten
      shell: |
        ls -1t {{ nas_backup_dir }}/{{ backup_pattern }} 2>/dev/null | head -n 1
      register: nas_backup
      changed_when: false

    # --- Find latest OneDrive backup ---
    - name: Find latest OneDrive backup
      become_user: karsten
      shell: |
        rclone ls "{{ rclone_remote }}" | awk '{print $2}' | grep '^{{ service_name }}_backup_.*\.tar\.gz$' | sort | tail -n 1
      register: onedrive_backup
      changed_when: false

    # --- Set restore source and file (local > NAS > OneDrive)
    - name: Set restore source and file (local > NAS > OneDrive)
      set_fact:
        restore_source: >-
          {% if local_backup.stdout | trim != "" %}
            local
          {% elif nas_backup.stdout | trim != "" %}
            nas
          {% elif onedrive_backup.stdout | trim != "" %}
            onedrive
          {% else %}
            none
          {% endif %}
        restore_file: >-
          {% if local_backup.stdout | trim != "" %}
            {{ local_backup.stdout | trim }}
          {% elif nas_backup.stdout | trim != "" %}
            {{ nas_backup.stdout | trim }}
          {% elif onedrive_backup.stdout | trim != "" %}
            {{ onedrive_backup.stdout | trim }}
          {% else %}
            ""
          {% endif %}

    - name: Fail if no backup found anywhere
      fail:
        msg: "No backups found in local, NAS, or OneDrive!"
      when: restore_source == "none"

    # --- If restoring from OneDrive, download it to backup_dir ---
    - name: Download latest backup from OneDrive if needed
      become_user: karsten
      shell: |
        rclone copy "{{ rclone_remote }}/{{ restore_file | basename | trim }}" "{{ backup_dir }}/"
      when: restore_source == "onedrive"
      args:
        executable: /bin/bash

    # --- If restoring from NAS, copy it to backup_dir ---
    - name: Copy latest backup from NAS if needed
      become_user: karsten
      shell: |
        cp "{{ restore_file | trim }}" "{{ backup_dir }}/"
      when: restore_source == "nas"
      args:
        executable: /bin/bash

    # --- Remove existing jellyfin directory ---
    - name: Remove existing {{ service_name }} directory
      file:
        path: "{{ service_dir }}"
        state: absent

    - name: Recreate {{ service_name }} directory
      become_user: karsten
      file:
        path: "{{ service_dir }}"
        state: directory
        mode: '0755'

    # --- Extract backup archive into ~/jellyfin ---
    - name: Extract backup archive into ~/{{ service_name }}
      become_user: karsten
      unarchive:
        src: "{{ backup_dir }}/{{ restore_file | basename | trim }}"
        dest: "{{ service_dir | dirname }}"
        remote_src: yes
        extra_opts:
          - --overwrite
          - --no-same-owner
          - --no-same-permissions

    - name: Start {{ service_name }} containers
      become_user: karsten
      shell: docker-compose up -d
      args:
        chdir: "{{ service_dir }}"
